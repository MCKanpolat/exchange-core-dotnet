// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Exchange.Core.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("An exchange accepts bid\\ask orders, manage and publish order book and match cross" +
        " orders")]
    public partial class AnExchangeAcceptsBidAskOrdersManageAndPublishOrderBookAndMatchCrossOrdersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Basic.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "An exchange accepts bid\\ask orders, manage and publish order book and match cross" +
                    " orders", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
  #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "1000000"});
            table1.AddRow(new string[] {
                        "XBT",
                        "100000000"});
            table1.AddRow(new string[] {
                        "ETH",
                        "100000000"});
#line 4
    testRunner.Given("New client Alice has a balance:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "2000000"});
            table2.AddRow(new string[] {
                        "XBT",
                        "100000000"});
            table2.AddRow(new string[] {
                        "ETH",
                        "100000000"});
#line 8
    testRunner.And("New client Bob has a balance:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("basic full cycle test")]
        [NUnit.Framework.CategoryAttribute("BasicFullCycleTest")]
        [NUnit.Framework.TestCaseAttribute("EUR_USD", null)]
        [NUnit.Framework.TestCaseAttribute("ETH_XBT", null)]
        public virtual void BasicFullCycleTest(string symbol, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BasicFullCycleTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("symbol", symbol);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("basic full cycle test", null, tagsOfScenario, argumentsOfScenario);
#line 14
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
#line 16
    testRunner.When(string.Format("A client Alice places an ASK order 101 at 1600@7 (type: GTC, symbol: {0})", symbol), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
    testRunner.And(string.Format("A client Alice places an BID order 102 at 1550@4 (type: GTC, symbol: {0}, reserve" +
                            "Price: 1561)", symbol), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "bid",
                            "price",
                            "ask"});
                table3.AddRow(new string[] {
                            "",
                            "1600",
                            "7"});
                table3.AddRow(new string[] {
                            "4",
                            "1550",
                            ""});
#line 18
    testRunner.Then(string.Format("An {0} order book is:", symbol), ((string)(null)), table3, "Then ");
#line hidden
#line 22
    testRunner.And("No trade events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "price",
                            "size",
                            "filled",
                            "reservePrice",
                            "side"});
                table4.AddRow(new string[] {
                            "101",
                            "1600",
                            "7",
                            "0",
                            "0",
                            "ASK"});
                table4.AddRow(new string[] {
                            "102",
                            "1550",
                            "4",
                            "0",
                            "1561",
                            "BID"});
#line 23
    testRunner.And("A client Alice orders:", ((string)(null)), table4, "And ");
#line hidden
#line 28
    testRunner.When(string.Format("A client Bob places an BID order 201 at 1700@2 (type: IOC, symbol: {0}, reservePr" +
                            "ice: 1800)", symbol), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("The order 101 is partially matched. LastPx: 1600, LastQty: 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "1600",
                            "5"});
                table5.AddRow(new string[] {
                            "4",
                            "1550",
                            ""});
#line 30
    testRunner.And(string.Format("An {0} order book is:", symbol), ((string)(null)), table5, "And ");
#line hidden
#line 34
    testRunner.When(string.Format("A client Bob places an BID order 202 at 1583@4 (type: GTC, symbol: {0}, reservePr" +
                            "ice: 1583)", symbol), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "1600",
                            "5"});
                table6.AddRow(new string[] {
                            "4",
                            "1583",
                            ""});
                table6.AddRow(new string[] {
                            "4",
                            "1550",
                            ""});
#line 35
    testRunner.Then(string.Format("An {0} order book is:", symbol), ((string)(null)), table6, "Then ");
#line hidden
#line 39
    testRunner.And("No trade events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
    testRunner.When("A client Alice moves a price to 1580 of the order 101", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
    testRunner.Then("The order 202 is fully matched. LastPx: 1583, LastQty: 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "1580",
                            "1"});
                table7.AddRow(new string[] {
                            "4",
                            "1550",
                            ""});
#line 43
    testRunner.And(string.Format("An {0} order book is:", symbol), ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("cancel BID order")]
        [NUnit.Framework.CategoryAttribute("CancelBidOrder")]
        public virtual void CancelBIDOrder()
        {
            string[] tagsOfScenario = new string[] {
                    "CancelBidOrder"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("cancel BID order", null, tagsOfScenario, argumentsOfScenario);
#line 53
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "XBT",
                            "94000000"});
#line 55
    testRunner.Given("New client Charlie has a balance:", ((string)(null)), table8, "Given ");
#line hidden
#line 58
    testRunner.When("A client Charlie places an BID order 203 at 18500@500 (type: GTC, symbol: ETH_XBT" +
                        ", reservePrice: 18500)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "ETH",
                            "0"});
                table9.AddRow(new string[] {
                            "XBT",
                            "1500000"});
#line 60
    testRunner.Then("A balance of a client Charlie:", ((string)(null)), table9, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "price",
                            "size",
                            "filled",
                            "reservePrice",
                            "side"});
                table10.AddRow(new string[] {
                            "203",
                            "18500",
                            "500",
                            "0",
                            "18500",
                            "BID"});
#line 64
    testRunner.And("A client Charlie orders:", ((string)(null)), table10, "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "500",
                            "18500",
                            ""});
#line 68
    testRunner.And("An ETH_XBT order book is:", ((string)(null)), table11, "And ");
#line hidden
#line 71
    testRunner.When("A client Charlie cancels the remaining size 500 of the order 203", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
    testRunner.Then("A client Charlie does not have active orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "ETH",
                            "0"});
                table12.AddRow(new string[] {
                            "XBT",
                            "94000000"});
#line 73
    testRunner.And("A balance of a client Charlie:", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
