using Exchange.Core.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exchange.Core.Tests
{
    public sealed class TestConstants
    {
        public static readonly int SYMBOL_MARGIN = 5991;
        public static readonly int SYMBOL_EXCHANGE = 9269;
        public static readonly int SYMBOL_EXCHANGE_FEE = 9340;

        public static readonly long UID_1 = 1440001;
        public static readonly long UID_2 = 1440002;
        public static readonly long UID_3 = 1440003;
        public static readonly long UID_4 = 1440004;

        public static readonly int SYMBOL_AUTOGENERATED_RANGE_START = 40000;

        public static readonly int CURRENECY_AUD = 36;
        public static readonly int CURRENECY_BRL = 986;
        public static readonly int CURRENECY_CAD = 124;
        public static readonly int CURRENECY_CHF = 756;
        public static readonly int CURRENECY_CNY = 156;
        public static readonly int CURRENECY_CZK = 203;
        public static readonly int CURRENECY_DKK = 208;
        public static readonly int CURRENECY_EUR = 978;
        public static readonly int CURRENECY_GBP = 826;
        public static readonly int CURRENECY_HKD = 344;
        public static readonly int CURRENECY_JPY = 392;
        public static readonly int CURRENECY_KRW = 410;
        public static readonly int CURRENECY_MXN = 484;
        public static readonly int CURRENECY_MYR = 458;
        public static readonly int CURRENECY_NOK = 578;
        public static readonly int CURRENECY_NZD = 554;
        public static readonly int CURRENECY_PLN = 985;
        public static readonly int CURRENECY_RUB = 643;
        public static readonly int CURRENECY_SEK = 752;
        public static readonly int CURRENECY_SGD = 702;
        public static readonly int CURRENECY_THB = 764;
        public static readonly int CURRENECY_TRY = 949;
        public static readonly int CURRENECY_UAH = 980;
        public static readonly int CURRENECY_USD = 840;
        public static readonly int CURRENECY_VND = 704;
        public static readonly int CURRENECY_XAG = 961;
        public static readonly int CURRENECY_XAU = 959;
        public static readonly int CURRENECY_ZAR = 710;

        public static readonly int CURRENECY_XBT = 3762; // satoshi, 1E-8
        public static readonly int CURRENECY_ETH = 3928; // szabo, 1E-6
        public static readonly int CURRENECY_LTC = 4141; // litoshi, 1E-8
        public static readonly int CURRENECY_XDG = 4142;
        public static readonly int CURRENECY_GRC = 4143;
        public static readonly int CURRENECY_XPM = 4144;
        public static readonly int CURRENECY_XRP = 4145;
        public static readonly int CURRENECY_DASH = 4146;
        public static readonly int CURRENECY_XMR = 4147;
        public static readonly int CURRENECY_XLM = 4148;
        public static readonly int CURRENECY_ETC = 4149;
        public static readonly int CURRENECY_ZEC = 4150;


        public static readonly HashSet<int> CURRENCIES_FUTURES = new HashSet<int>(new[]
        {
            CURRENECY_USD,
            CURRENECY_EUR
        });

        public static readonly HashSet<int> CURRENCIES_EXCHANGE = new HashSet<int>(new[]
        {
            CURRENECY_ETH,
            CURRENECY_XBT
        });


        public static readonly HashSet<int> ALL_CURRENCIES = new HashSet<int>(new[]
        {
                CURRENECY_AUD,
                CURRENECY_BRL,
                CURRENECY_CAD,
                CURRENECY_CHF,
                CURRENECY_CNY,
                CURRENECY_CZK,
                CURRENECY_DKK,
                CURRENECY_EUR,
                CURRENECY_GBP,
                CURRENECY_HKD,
                CURRENECY_JPY,
                CURRENECY_KRW,
                CURRENECY_MXN,
                CURRENECY_MYR,
                CURRENECY_NOK,
                CURRENECY_NZD,
                CURRENECY_PLN,
                CURRENECY_RUB,
                CURRENECY_SEK,
                CURRENECY_SGD,
                CURRENECY_THB,
                CURRENECY_TRY,
                CURRENECY_UAH,
                CURRENECY_USD,
                CURRENECY_VND,
                CURRENECY_XAG,
                CURRENECY_XAU,
                CURRENECY_ZAR,

                CURRENECY_XBT,
                CURRENECY_ETH,
                CURRENECY_LTC,
                CURRENECY_XDG,
                CURRENECY_GRC,
                CURRENECY_XPM,
                CURRENECY_XRP,
                CURRENECY_DASH,
                CURRENECY_XMR,
                CURRENECY_XLM,
                CURRENECY_ETC,
                CURRENECY_ZEC
        });

        public static readonly CoreSymbolSpecification SYMBOLSPEC_EUR_USD = CoreSymbolSpecification.Builder()
            .symbolId(SYMBOL_MARGIN)
                .type(SymbolType.FUTURES_CONTRACT)
                .baseCurrency(CURRENECY_EUR)
                .quoteCurrency(CURRENECY_USD)
                .baseScaleK(1)
                .quoteScaleK(1)
                .marginBuy(2200)
                .marginSell(3210)
                .takerFee(0)
                .makerFee(0)
                .build();

        public static readonly CoreSymbolSpecification SYMBOLSPECFEE_USD_JPY = CoreSymbolSpecification.Builder()
            .symbolId(SYMBOL_MARGIN)
                .type(SymbolType.FUTURES_CONTRACT)
                .baseCurrency(CURRENECY_USD)
                .quoteCurrency(CURRENECY_JPY)
                .baseScaleK(1_000_00) // 1K USD "micro" lot
            .quoteScaleK(10) // 10 JPY step
            .marginBuy(5_000) // effective leverage ~21
            .marginSell(6_000) // effective leverage ~18
            .takerFee(3)
                .makerFee(2)
                .build();


        public static readonly CoreSymbolSpecification SYMBOLSPEC_ETH_XBT = CoreSymbolSpecification.Builder()
            .symbolId(SYMBOL_EXCHANGE)
                .type(SymbolType.CURRENCY_EXCHANGE_PAIR)
                .baseCurrency(CURRENECY_ETH)    // base = szabo
            .quoteCurrency(CURRENECY_XBT)   // quote = satoshi
            .baseScaleK(100_000)            // 1 lot = 100K szabo (0.1 ETH)
            .quoteScaleK(10)                // 1 step = 10 satoshi
            .takerFee(0)
                .makerFee(0)
                .build();

        // symbol with fees
        public static readonly CoreSymbolSpecification SYMBOLSPECFEE_XBT_LTC = CoreSymbolSpecification.Builder()
            .symbolId(SYMBOL_EXCHANGE_FEE)
                .type(SymbolType.CURRENCY_EXCHANGE_PAIR)
                .baseCurrency(CURRENECY_XBT)    // base = satoshi
            .quoteCurrency(CURRENECY_LTC)   // quote = litoshi
            .baseScaleK(1_000_000)          // 1 lot = 1M satoshi (0.01 BTC)
            .quoteScaleK(10_000)            // 1 step = 10K litoshi
            .takerFee(1900)                 // taker fee 1900 litoshi per 1 lot
            .makerFee(700)                  // maker fee 700 litoshi per 1 lot
            .build();

        public static int getCurrency(String currency)
        {

            switch (currency)
            {
                case "USD":
                    return CURRENECY_USD;
                case "XBT":
                    return CURRENECY_XBT;
                case "ETH":
                    return CURRENECY_ETH;
            }

            throw new NotImplementedException("Unknown currency [" + currency + "]");
            //throw new RuntimeException("Unknown currency [" + currency + "]");
        }
    }

}
